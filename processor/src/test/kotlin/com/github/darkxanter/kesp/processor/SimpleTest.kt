package com.github.darkxanter.kesp.processor

import com.github.darkxanter.kesp.processor.helpers.BaseKspTest
import com.github.darkxanter.kesp.processor.helpers.KotlinFile
import com.github.darkxanter.kesp.processor.helpers.beSubtypeOf
import com.github.darkxanter.kesp.processor.helpers.ktSourceFile
import io.kotest.matchers.reflection.shouldBeData
import io.kotest.matchers.reflection.shouldHaveFunction
import io.kotest.matchers.reflection.shouldHaveMemberProperty
import io.kotest.matchers.shouldBe
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows

class SimpleTest : BaseKspTest() {
    companion object {
        private const val PACKAGE = "test.simple"
    }

    private val sourceFileDefault = ktSourceFile(
        "UserTable",
        """
        package $PACKAGE

        import com.github.darkxanter.kesp.annotation.ExposedTable
        import com.github.darkxanter.kesp.annotation.GeneratedValue
        import org.jetbrains.exposed.dao.id.LongIdTable
        import org.jetbrains.exposed.sql.javatime.date
        import org.jetbrains.exposed.sql.javatime.timestamp

        /** User account */
        @ExposedTable
        object UserTable : LongIdTable("users") {
            /**
             * Username
             */
            val username = varchar("username", 255)

            /** User password */
            val password = varchar("password", 255)

            /** Day of birth */
            val birthDate = date("birth_date").nullable()

            /** Account creation time */
            @GeneratedValue
            val createdAt = timestamp("created_at")
        }
        """.trimIndent(),
    )

    private val sourceFileModified = ktSourceFile(
        "UserTable",
        """
        package $PACKAGE

        import com.github.darkxanter.kesp.annotation.ExposedTable
        import com.github.darkxanter.kesp.annotation.GeneratedValue
        import org.jetbrains.exposed.dao.id.LongIdTable
        import org.jetbrains.exposed.sql.javatime.date
        import org.jetbrains.exposed.sql.javatime.timestamp

        /** User account */
        @ExposedTable
        object UserTable : LongIdTable("users") {
            /**
             * Username
             */
            val username = varchar("username", 255)

            /** User password */
            val password = varchar("password", 255)

            /** Day of birth */
            // val birthDate = date("birth_date").nullable()

            /** Account creation time */
            @GeneratedValue
            val createdAt = timestamp("created_at")
        }
        """.trimIndent(),
    )

    private val expectedFiles = listOf(
        KotlinFile(
            "UserTableFunctions.kt",
            """
            // This file was generated by kesp.
            // Do not modify this file.
            @file:Suppress(
              "unused",
              "RedundantVisibilityModifier",
              "UnusedReceiverParameter",
              "RedundantUnitReturnType",
              "MemberVisibilityCanBePrivate",
              "MatchingDeclarationName",
              "FunctionParameterNaming",
            )

            package test.simple

            import kotlin.Int
            import kotlin.Long
            import kotlin.Suppress
            import kotlin.Unit
            import kotlin.collections.Iterable
            import kotlin.collections.List
            import org.jetbrains.exposed.sql.Alias
            import org.jetbrains.exposed.sql.ResultRow
            import org.jetbrains.exposed.sql.batchInsert
            import org.jetbrains.exposed.sql.insertAndGetId
            import org.jetbrains.exposed.sql.statements.UpdateBuilder
            import org.jetbrains.exposed.sql.update

            public fun UserTable.batchInsertDtos(dtos: Iterable<UserTableCreate>): List<Long> =
                UserTable.batchInsert(dtos) {
              this.fromDto(it)
            }.map { it[UserTable.id].value }

            public fun UserTable.insertDto(dto: UserTableCreate): Long = UserTable.insertAndGetId {
              it.fromDto(dto)
            }.value

            public fun UserTable.updateDto(id: Long, dto: UserTableCreate): Int =
                UserTable.update({UserTable.id.eq(id)}) {
              it.fromDto(dto)
            }

            public fun ResultRow.toUserTableFullDto(): UserTableFullDto = UserTableFullDto(
              id = this[UserTable.id].value,
              username = this[UserTable.username],
              password = this[UserTable.password],
              birthDate = this[UserTable.birthDate],
              createdAt = this[UserTable.createdAt],
            )

            public fun ResultRow.toUserTableFullDto(alias: Alias<UserTable>): UserTableFullDto =
                UserTableFullDto(
              id = this[alias[UserTable.id]].value,
              username = this[alias[UserTable.username]],
              password = this[alias[UserTable.password]],
              birthDate = this[alias[UserTable.birthDate]],
              createdAt = this[alias[UserTable.createdAt]],
            )

            public fun Iterable<ResultRow>.toUserTableFullDtoList(): List<UserTableFullDto> = map {
              it.toUserTableFullDto()
            }

            public fun Iterable<ResultRow>.toUserTableFullDtoList(alias: Alias<UserTable>):
                List<UserTableFullDto> = map {
              it.toUserTableFullDto(alias)
            }

            public fun UpdateBuilder<*>.fromDto(dto: UserTableCreate): Unit {
              this[UserTable.username] = dto.username
              this[UserTable.password] = dto.password
              this[UserTable.birthDate] = dto.birthDate
            }
            """.trimIndent()
        ),
        KotlinFile(
            "UserTableModels.kt",
            """
                // This file was generated by kesp.
                // Do not modify this file.
                @file:Suppress(
                  "unused",
                  "RedundantVisibilityModifier",
                  "UnusedReceiverParameter",
                  "RedundantUnitReturnType",
                  "MemberVisibilityCanBePrivate",
                  "MatchingDeclarationName",
                  "FunctionParameterNaming",
                )

                package test.simple

                import java.time.Instant
                import java.time.LocalDate
                import kotlin.Long
                import kotlin.String
                import kotlin.Suppress

                /**
                 * User account
                 */
                public interface UserTableCreate {
                  /**
                   * Username
                   */
                  public val username: String

                  /**
                   * User password
                   */
                  public val password: String

                  /**
                   * Day of birth
                   */
                  public val birthDate: LocalDate?
                }

                /**
                 * User account
                 */
                public data class UserTableCreateDto(
                  /**
                   * Username
                   */
                  public override val username: String,
                  /**
                   * User password
                   */
                  public override val password: String,
                  /**
                   * Day of birth
                   */
                  public override val birthDate: LocalDate? = null,
                ) : UserTableCreate

                /**
                 * User account
                 */
                public interface UserTableFull : UserTableCreate {
                  public val id: Long

                  /**
                   * Account creation time
                   */
                  public val createdAt: Instant
                }

                /**
                 * User account
                 */
                public data class UserTableFullDto(
                  public override val id: Long,
                  /**
                   * Username
                   */
                  public override val username: String,
                  /**
                   * User password
                   */
                  public override val password: String,
                  /**
                   * Day of birth
                   */
                  public override val birthDate: LocalDate? = null,
                  /**
                   * Account creation time
                   */
                  public override val createdAt: Instant,
                ) : UserTableFull
            """.trimIndent()
        ),
        KotlinFile(
            "UserTableRepository.kt",
            """
                // This file was generated by kesp.
                // Do not modify this file.
                @file:Suppress(
                  "unused",
                  "RedundantVisibilityModifier",
                  "UnusedReceiverParameter",
                  "RedundantUnitReturnType",
                  "MemberVisibilityCanBePrivate",
                  "MatchingDeclarationName",
                  "FunctionParameterNaming",
                )

                package test.simple

                import kotlin.Boolean
                import kotlin.Int
                import kotlin.Long
                import kotlin.Suppress
                import kotlin.Unit
                import kotlin.collections.Iterable
                import kotlin.collections.List
                import org.jetbrains.exposed.sql.ISqlExpressionBuilder
                import org.jetbrains.exposed.sql.Op
                import org.jetbrains.exposed.sql.Query
                import org.jetbrains.exposed.sql.SqlExpressionBuilder
                import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
                import org.jetbrains.exposed.sql.and
                import org.jetbrains.exposed.sql.deleteWhere
                import org.jetbrains.exposed.sql.select
                import org.jetbrains.exposed.sql.selectAll
                import org.jetbrains.exposed.sql.transactions.transaction

                public open class UserTableRepository {
                  public fun find(configure: Query.(table: UserTable) -> Unit = {},
                      `where`: (SqlExpressionBuilder.(table: UserTable) -> Op<Boolean>)? = null):
                      List<UserTableFullDto> {

                    return transaction {
                      if (where != null) {
                        UserTable.select{where(UserTable)}.apply{configure(UserTable)}.toUserTableFullDtoList()
                      } else {
                        UserTable.selectAll().apply{configure(UserTable)}.toUserTableFullDtoList()
                      }
                    }
                  }

                  public fun findOne(`where`: SqlExpressionBuilder.(table: UserTable) -> Op<Boolean>):
                      UserTableFullDto? {

                    return find(where = where).singleOrNull()
                  }

                  public fun findById(id: Long): UserTableFullDto? {

                    return findOne {
                      UserTable.id.eq(id)
                    }
                  }

                  public fun create(dto: UserTableCreate): Long = transaction {
                    UserTable.insertDto(dto)
                  }

                  public fun createMultiple(dtos: Iterable<UserTableCreate>): List<Long> = transaction {
                    UserTable.batchInsertDtos(dtos)
                  }

                  public fun update(id: Long, dto: UserTableCreate): Int = transaction {
                    UserTable.updateDto(id, dto)
                  }

                  public fun deleteById(id: Long): Int = delete {
                    UserTable.id.eq(id)
                  }

                  public fun delete(`where`: UserTable.(ISqlExpressionBuilder) -> Op<Boolean>): Int {

                    return transaction {
                      UserTable.deleteWhere {
                        where(it)
                      }
                    }
                  }
                }
            """.trimIndent()
        ),
    )

    @Test
    fun compileTest() {
        val result = compileFilesWithGeneratedSources(
            sourceFiles = listOf(sourceFileDefault),
            expectedFiles = expectedFiles,
        )

        val createInterface = result.classLoader.loadClass("$PACKAGE.UserTableCreate").kotlin
        createInterface shouldHaveMemberProperty "username"
        createInterface shouldHaveMemberProperty "password"
        createInterface shouldHaveMemberProperty "birthDate"

        val createDto = result.classLoader.loadClass("$PACKAGE.UserTableCreateDto").kotlin
        createDto.shouldBeData()
        createDto shouldBe beSubtypeOf(createInterface)
        createDto shouldHaveMemberProperty "username"
        createDto shouldHaveMemberProperty "password"
        createDto shouldHaveMemberProperty "birthDate"

        val fullInterface = result.classLoader.loadClass("$PACKAGE.UserTableFull").kotlin
        fullInterface shouldHaveMemberProperty "username"
        fullInterface shouldHaveMemberProperty "password"
        fullInterface shouldHaveMemberProperty "birthDate"
        fullInterface shouldHaveMemberProperty "id"
        fullInterface shouldHaveMemberProperty "birthDate"

        val fullDto = result.classLoader.loadClass("$PACKAGE.UserTableFullDto").kotlin
        fullDto.shouldBeData()
        fullDto shouldBe beSubtypeOf(createInterface)
        fullDto shouldHaveMemberProperty "username"
        fullDto shouldHaveMemberProperty "password"
        fullDto shouldHaveMemberProperty "birthDate"
        fullDto shouldHaveMemberProperty "id"
        fullDto shouldHaveMemberProperty "birthDate"

        val repository = result.classLoader.loadClass("$PACKAGE.UserTableRepository").kotlin
        repository shouldHaveFunction "find"
        repository shouldHaveFunction "findOne"
        repository shouldHaveFunction "findById"
        repository shouldHaveFunction "create"
        repository shouldHaveFunction "createMultiple"
        repository shouldHaveFunction "update"
        repository shouldHaveFunction "deleteById"
        repository shouldHaveFunction "delete"
    }

    @Test
    fun mustFail() {
        assertThrows<org.opentest4j.AssertionFailedError> {
            compileFilesWithGeneratedSources(
                sourceFiles = listOf(sourceFileModified),
                expectedFiles = expectedFiles,
            )
        }
    }
}
